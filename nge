#!/bin/bash
set -Eeo pipefail
set -o errexit    # Used to exit upon error, avoiding cascading errors

IFS=$'\n\t'

# read .env.docker file
source <(grep -v '^#' .env.docker | sed -E 's|^(.+)=(.*)$|: ${\1=\2}; export \1|g')

# usage: file_env VAR [DEFAULT]
#    ie: file_env 'XYZ_DB_PASSWORD' 'example'
# (will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of
#  "$XYZ_DB_PASSWORD" from a file, especially for Docker's secrets feature)
file_env() {
	local var="$1"
	local fileVar="${var}_FILE"
	local def="${2:-}"
	if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
		echo >&2 "error: both $var and $fileVar are set (but are exclusive)"
		exit 1
	fi
	local val="$def"
	if [ "${!var:-}" ]; then
		val="${!var}"
	elif [ "${!fileVar:-}" ]; then
		val="$(< "${!fileVar}")"
	fi
	export "$var"="$val"
	unset "$fileVar"
}

install() {
	echo "installing in 5 seconds"
	sleep 5

    printf "\n\n${YELLOW}[octane]${NC} installing package...\n"
    composer install
    printf "\n\n${YELLOW}[octane]${NC} put application under maintenance...\n"
    if [[ -z "$APP_KEY" ]]; then
        artisan key:generate
    fi
    artisan down
    printf "\n\n${YELLOW}[octane]${NC} running database migration and seeders...\n"
    artisan migrate --seed
    printf "\n\n${YELLOW}[octane]${NC} upping application\n"
    artisan up
    artisan storage:link

    printf "\n\n${BLUE}[app]${NC} building node packages...\n"
    npm ci
    npm run production

}

composer() {
    file_env 'DOCKER_USER' 'dokar'
    echo "run composer on user : ${DOCKER_USER}"
    docker compose --env-file=.env.docker run --rm --user=${DOCKER_USER} octane composer $@
}

shell() {
    file_env 'DOCKER_USER' 'dokar'
    echo "run shell on user : ${DOCKER_USER}"
    docker compose --env-file=.env.docker run --rm --user=${DOCKER_USER} octane bash
}

artisan() {
    file_env 'DOCKER_USER' 'dokar'
    echo "run artisan on user : ${DOCKER_USER}"
    docker compose --env-file=.env.docker run --rm --user=${DOCKER_USER} octane php artisan --env=docker $@
}

npm() {
    file_env 'DOCKER_USER' 'dokar'
    echo "run npm on user : ${DOCKER_USER}"
    docker compose --env-file=.env.docker run --rm --user=${DOCKER_USER} octane npm $@
}

up() {
    echo "Nge up service $@..."
    docker compose --env-file=.env.docker up -d $@
}

down() {
    echo "Nge down all service..."
    docker compose --env-file=.env.docker down
}

check() {
    docker compose --env-file=.env.docker ps
}

compose() {
    docker compose --env-file=.env.docker $@
}

# Check if the function exists (bash specific)
if declare -f "$1" > /dev/null
then
  # call arguments verbatim
  "$@"
else
  # Show a helpful error
  echo "'$1' is not a known function name" >&2
  exit 1
fi

